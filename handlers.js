import database from './db.js';
import geminiService from './gemini.js';

class MessageHandlers {
  constructor() {
    this.botCommandPrefix = '/bot';
    this.reportCommandPrefix = '/report';
  }

  async handleIncomingMessage(message) {
    try {
      // Skip if message is from status broadcast or system
      if (message.from === 'status@broadcast' || message.type === 'system') {
        return;
      }

      // Get chat info
      const chat = await message.getChat();
      const contact = await message.getContact();
      
      // Only process group messages
      if (!chat.isGroup) {
        return;
      }

      const chatId = chat.id._serialized;
      const userId = contact.id._serialized;
      const userName = contact.name || contact.pushname || 'Unknown';
      const messageText = message.body || '[Media/System Message]';

      // Store message in database
      await database.insertMessage(chatId, userId, userName, messageText);

      // Check if it's a bot command
      if (messageText.toLowerCase().startsWith(this.botCommandPrefix)) {
        await this.handleBotCommand(message, chat, messageText);
      }
      
      // Check if it's a report command
      if (messageText.toLowerCase().startsWith(this.reportCommandPrefix)) {
        await this.handleReportCommand(message, chat);
      }

    } catch (error) {
      console.error('‚ùå Error handling incoming message:', error.message);
    }
  }

  async handleReportCommand(message, chat) {
    try {
      // Send processing message
      const processingMsg = await message.reply('üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.');
      
      // Generate and send the report
      await this.generateAndSendDailyReport(chat);
      
      // Delete processing message
      try {
        await processingMsg.delete(true);
      } catch (e) {
        // Ignore delete errors
      }
      
    } catch (error) {
      console.error('‚ùå Error handling report command:', error.message);
      try {
        await message.reply('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } catch (replyError) {
        console.error('‚ùå Failed to send error reply:', replyError.message);
      }
    }
  }

  async handleBotCommand(message, chat, messageText) {
    try {
      // Extract the question from the command
      const question = messageText.substring(this.botCommandPrefix.length).trim();
      
      if (!question) {
        await message.reply('ü§ñ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –≥—Ä—É–ø–ø–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ /bot –ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –æ–±—Å—É–∂–¥–∞–ª–∏—Å—å?\n‚Ä¢ /bot –ö—Ç–æ –±—ã–ª —Å–∞–º—ã–º –∞–∫—Ç–∏–≤–Ω—ã–º?\n‚Ä¢ /bot –ö–∞–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã?\n‚Ä¢ /report - –ø–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç');
        return;
      }

      // Send processing message
      const processingMsg = await message.reply('ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã... –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.');

      // Get messages from last 14 days
      const messages = await database.getMessagesByDays(chat.id._serialized, 14);

      if (messages.length === 0) {
        await processingMsg.edit('‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      // Generate AI response
      const aiResponse = await geminiService.answerQuestion(question, messages);

      // Send the response
      await processingMsg.edit(`ü§ñ *–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –û–¢–í–ï–¢*\n\n${aiResponse}`);

    } catch (error) {
      console.error('‚ùå Error handling bot command:', error.message);
      try {
        await message.reply('‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      } catch (replyError) {
        console.error('‚ùå Failed to send error reply:', replyError.message);
      }
    }
  }

  async generateAndSendDailyReport(chat) {
    try {
      console.log(`üìä Generating daily report for chat: ${chat.name}`);

      // Get messages from last 24 hours
      const messages = await database.getMessagesByTimeRange(chat.id._serialized, 24);

      if (messages.length === 0) {
        console.log('üìä No messages found for daily report');
        return;
      }

      // Generate AI report
      const report = await geminiService.generateDailyReport(messages);

      // Format the report with better structure
      const timestamp = new Date().toLocaleString('en-US', {
        timeZone: 'UTC',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });

      // Create a nicely formatted business report
      const header = `üìä *–ï–ñ–ï–î–ù–ï–í–ù–´–ô –î–ï–õ–û–í–û–ô –û–¢–ß–ï–¢*\nüìÖ ${timestamp} UTC\nüìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;
      
      const footer = `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nü§ñ _WhatsApp Analytics Bot | –î–µ–ª–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑_`;

      const formattedReport = `${header}\n\n${report}${footer}`;

      // Split long messages if needed (WhatsApp limit is ~4096 characters)
      if (formattedReport.length > 4000) {
        const chunks = this.splitMessage(formattedReport, 4000);
        for (const chunk of chunks) {
          await chat.sendMessage(chunk);
          await new Promise(resolve => setTimeout(resolve, 1000)); // Delay between messages
        }
      } else {
        await chat.sendMessage(formattedReport);
      }
      
      console.log('‚úÖ Daily report sent successfully');

    } catch (error) {
      console.error('‚ùå Error generating daily report:', error.message);
      
      // Send error notification
      try {
        await chat.sendMessage('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–ª–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã.');
      } catch (sendError) {
        console.error('‚ùå Failed to send error notification:', sendError.message);
      }
    }
  }

  splitMessage(text, maxLength) {
    const chunks = [];
    let currentChunk = '';
    
    const lines = text.split('\n');
    
    for (const line of lines) {
      if (currentChunk.length + line.length + 1 > maxLength) {
        if (currentChunk.length > 0) {
          chunks.push(currentChunk.trim());
          currentChunk = line;
        } else {
          // Line is too long, split it
          chunks.push(line.substring(0, maxLength));
          currentChunk = line.substring(maxLength);
        }
      } else {
        currentChunk += (currentChunk ? '\n' : '') + line;
      }
    }
    
    if (currentChunk.trim()) {
      chunks.push(currentChunk.trim());
    }
    
    return chunks;
  }

  async cleanupOldMessages() {
    try {
      const retentionDays = parseInt(process.env.MESSAGE_RETENTION_DAYS) || 14;
      await database.cleanupOldMessages(retentionDays);
    } catch (error) {
      console.error('‚ùå Error during cleanup:', error.message);
    }
  }
}

export default new MessageHandlers();
