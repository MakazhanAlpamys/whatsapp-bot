import { GoogleGenAI } from "@google/genai/node";
import dotenv from 'dotenv';

dotenv.config();

class GeminiService {
  constructor() {
    this.ai = null;
    this.isInitialized = false;
  }

  async initialize() {
    try {
      if (!process.env.GEMINI_API_KEY) {
        throw new Error('GEMINI_API_KEY environment variable is required');
      }

      this.ai = new GoogleGenAI({
        apiKey: process.env.GEMINI_API_KEY
      });

      this.isInitialized = true;
      console.log('‚úÖ Gemini AI service initialized');
      return true;
    } catch (error) {
      console.error('‚ùå Failed to initialize Gemini AI:', error.message);
      this.isInitialized = false;
      return false;
    }
  }

  async detectLanguage(messages) {
    if (!this.isInitialized) {
      throw new Error('Gemini AI service not initialized');
    }

    try {
      // Take more messages for better language detection (up to 50)
      const sampleMessages = messages.slice(0, 50).map(msg => msg.message_text).join(' ');
      
      const prompt = `
Analyze the following text from a WhatsApp group chat and determine the PRIMARY language used by the majority of participants.

Rules:
- If the chat is mixed language, determine which language is used MOST FREQUENTLY
- Consider both message content and typical patterns
- Respond with ONLY the language name in English (e.g., "Russian", "English", "Spanish", "French", "German", "Chinese", "Arabic", etc.)
- If it's clearly mixed with no dominant language, default to "English"

Text sample: ${sampleMessages}
      `;

      const response = await this.ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
      });

      const detectedLang = response.text.trim();
      console.log(`üåç Detected primary language: ${detectedLang}`);
      return detectedLang;
    } catch (error) {
      console.error('‚ùå Failed to detect language:', error.message);
      return 'English'; // Default fallback
    }
  }

  async generateDailyReport(messages) {
    if (!this.isInitialized) {
      throw new Error('Gemini AI service not initialized');
    }

    try {
      // Detect language first
      const detectedLanguage = await this.detectLanguage(messages);
      console.log(`üåç Detected language: ${detectedLanguage}`);

      const messageText = messages.map(msg => 
        `[${msg.created_at}] ${msg.user_name}: ${msg.message_text}`
      ).join('\n');

      // Create language-specific prompts for business reports
      const prompts = {
        'Russian': `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è WhatsApp –≥—Ä—É–ø–ø—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏ —Å–æ–∑–¥–∞–π—Ç–µ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –î–ï–¢–ê–õ–¨–ù–´–ô –¥–µ–ª–æ–≤–æ–π –æ—Ç—á–µ—Ç.

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π—Ç–µ —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–°–æ–æ–±—â–µ–Ω–∏—è:
${messageText}

–°–æ–∑–¥–∞–π—Ç–µ –î–ï–¢–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–ª–æ–≤–æ–π –æ—Ç—á–µ—Ç —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏:

1. **üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò**
   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (—É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ)
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫)
   - –¢–û–ü-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ
   - –ß–∞—Å—ã –ø–∏–∫–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏)
   - –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Å–ª–æ–≤–∞—Ö)
   - –°–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ –∏ —Å–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   - –ü—Ä–æ—Ü–µ–Ω—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö vs –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)

2. **üéØ –ü–û–î–†–û–ë–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–ï–ú –ò –ü–†–û–ï–ö–¢–û–í**
   - –°–≥—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ä–∞–±–æ—á–∏–º —Ç–µ–º–∞–º/–ø—Ä–æ–µ–∫—Ç–∞–º
   - –î–ª—è –ö–ê–ñ–î–û–ô —Ç–µ–º—ã —É–∫–∞–∂–∏—Ç–µ:
     * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
     * –ö–ª—é—á–µ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
     * –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –≤—ã–≤–æ–¥—ã
     * –°—Ç–∞—Ç—É—Å –æ–±—Å—É–∂–¥–µ–Ω–∏—è
   - –í—ã–¥–µ–ª–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
   - –û—Ç–º–µ—Ç—å—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∫–µ–º –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
   - –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏—á–∏–Ω—ã

3. **üë• –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –£–ß–ê–°–¢–ù–ò–ö–û–í**
   - –ü–û–õ–ù–´–ô —Å–ø–∏—Å–æ–∫ –í–°–ï–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —É–±—ã–≤–∞–Ω–∏—é)
   - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É–∫–∞–∂–∏—Ç–µ:
     * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
     * –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∏ –æ–±—Å—É–∂–¥–∞–ª–∏
     * –ò—Ö —Ä–æ–ª—å –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä)
   - –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
   - –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–∫—Ç–æ –º–æ–ª—á–∞–ª)
   - –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞

4. **üìà –ö–õ–Æ–ß–ï–í–´–ï –†–ï–®–ï–ù–ò–Ø –ò –†–ï–ó–£–õ–¨–¢–ê–¢–´**
   - –í–°–ï –ø—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
   - –í–°–ï –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º:
     * –ö—Ç–æ –Ω–∞–∑–Ω–∞—á–∏–ª
     * –ö–æ–º—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
     * –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     * –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
   - –î–µ–¥–ª–∞–π–Ω—ã –∏ –≤–∞–∂–Ω—ã–µ –¥–∞—Ç—ã
   - –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø–æ–¥—Ä–æ–±–Ω–æ)
   - –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è (–¥–µ—Ç–∞–ª—å–Ω–æ)
   - –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Ä–µ—à–µ–Ω–∏—è

5. **üí¨ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–ò**
   - –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π/–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π)
   - –¢–æ–Ω –¥–∏—Å–∫—É—Å—Å–∏–π (–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π)
   - –£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
   - –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   - –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   - –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–ª–∏ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è (–µ—Å–ª–∏ –±—ã–ª–∏)

6. **üîç –ì–õ–£–ë–û–ö–ò–ï –ò–ù–°–ê–ô–¢–´ –ò –ü–ê–¢–¢–ï–†–ù–´**
   - –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã
   - –¢—Ä–µ–Ω–¥—ã –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö
   - –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ (—á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, —á—Ç–æ –Ω–µ—Ç)
   - –£–∑–∫–∏–µ –º–µ—Å—Ç–∞ –∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
   - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è

7. **‚ö° –í–ê–ñ–ù–´–ï –ú–û–ú–ï–ù–¢–´ –ò –ê–ö–¶–ï–ù–¢–´**
   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ä–µ—à–µ–Ω–∏—è
   - –°—Ä–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
   - –†–∏—Å–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
   - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è —É–ø—É—Å—Ç–∏—Ç—å

8. **üìã –ü–õ–ê–ù–´ –ò –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò**
   - –í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏ (–≤—Ä–µ–º—è, —É—á–∞—Å—Ç–Ω–∏–∫–∏, —Ü–µ–ª—å)
   - –í—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
   - –í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã –∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
   - Action items –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞

9. **üìù –ò–¢–û–ì–û–í–û–ï –†–ï–ó–Æ–ú–ï**
   - –ì–ª–∞–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å
   - –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
   - –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
   - –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º

–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û —á–µ—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
- –î–æ–±–∞–≤–ª—è–π—Ç–µ –í–°–ï –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã
- –í—ã–¥–µ–ª—è–π—Ç–µ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é *–∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º*
- –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –¥–µ—Ç–∞–ª–∏ - –≤–∫–ª—é—á–∞–π—Ç–µ –≤—Å—é –∑–Ω–∞—á–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π
- –ü–∏—à–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–¥–µ–ª—É –Ω–µ—Ç - —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ
- –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤

–ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã!

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        `,
        'English': `
Analyze the following WhatsApp group messages from the last 24 hours and create a MAXIMALLY DETAILED business report.

IMPORTANT: Respond in English.

Messages:
${messageText}

Create a COMPREHENSIVE structured business report with the following sections:

1. **üìä DETAILED ACTIVITY STATISTICS**
   - Total message count (exact number)
   - Number of active participants (full list)
   - TOP-5 most active participants with exact message counts for each
   - Peak activity hours (specify exact time ranges)
   - Average message length (in words)
   - Longest and shortest messages
   - Percentage of text vs media messages
   - Activity distribution by hours (if possible)

2. **üéØ COMPREHENSIVE TOPICS & PROJECTS ANALYSIS**
   - Group ALL messages by work topics/projects
   - For EACH topic specify:
     * Message count
     * Key discussion participants
     * Main points and conclusions
     * Discussion status
   - Highlight priority tasks with details
   - Note completed tasks and who completed them
   - Incomplete tasks and reasons

3. **üë• FULL PARTICIPANT ANALYSIS**
   - COMPLETE list of ALL participants with message counts (sorted descending)
   - For each active participant specify:
     * Number of messages
     * Main topics they discussed
     * Their role in discussions (initiator, executor, commentator)
   - New participants (if any)
   - Inactive participants (who stayed silent)
   - Activity time for each participant

4. **üìà KEY DECISIONS AND RESULTS**
   - ALL decisions made with full description
   - ALL assigned tasks specifying:
     * Who assigned
     * Assigned to whom
     * Deadlines
     * Current status
   - Deadlines and important dates
   - Achieved results (detailed)
   - All problems and their solutions (detailed)
   - Open questions requiring resolution

5. **üí¨ DETAILED COMMUNICATION ANALYSIS**
   - Communication style (formal/informal)
   - Discussion tone (positive/negative/neutral)
   - Team engagement level
   - Response speed to messages
   - Feedback quality
   - Conflicts or disagreements (if any)

6. **üîç DEEP INSIGHTS AND PATTERNS**
   - Recurring themes or questions
   - Discussion trends
   - Participant activity patterns
   - Communication effectiveness (what works, what doesn't)
   - Process bottlenecks and issues
   - Improvement opportunities

7. **‚ö° IMPORTANT MOMENTS & HIGHLIGHTS**
   - Critically important messages or decisions
   - Urgent matters requiring attention
   - Risks and warnings
   - Opportunities not to be missed

8. **üìã PLANS AND NEXT STEPS**
   - All scheduled meetings with details (time, participants, purpose)
   - All upcoming tasks with priorities
   - Important dates and events coming up
   - Specific recommendations for tomorrow
   - Action items for each participant

9. **üìù EXECUTIVE SUMMARY**
   - Main achievements of the day
   - Key problems
   - Key takeaways
   - Overall project progress

Report format:
- Use MAXIMALLY clear structure with headers
- Add ALL specific numbers and facts
- Highlight important information in *bold*
- Don't skip details - include all significant information
- Use emojis for section separation
- Write in professional business style
- If no information for a section - state so clearly
- Maximum 4000 characters

Be maximally detailed and specific!

Respond in English.
        `
      };

      const prompt = prompts[detectedLanguage] || prompts['English'];

      const response = await this.ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
      });

      return response.text;
    } catch (error) {
      console.error('‚ùå Failed to generate daily report:', error.message);
      throw error;
    }
  }

  async answerQuestion(question, messages) {
    if (!this.isInitialized) {
      throw new Error('Gemini AI service not initialized');
    }

    try {
      // Detect language from messages
      const detectedLanguage = await this.detectLanguage(messages);
      console.log(`üåç Detected language for Q&A: ${detectedLanguage}`);

      const messageText = messages.map(msg => 
        `[${msg.created_at}] ${msg.user_name}: ${msg.message_text}`
      ).join('\n');

      const prompt = `
Based on the following WhatsApp group messages from the last 14 days, please answer this question: "${question}"

IMPORTANT: Respond in ${detectedLanguage} language. All text should be in ${detectedLanguage}.

Group Messages Context:
${messageText}

Instructions:
- Use only the information from the provided messages
- If the question cannot be answered from the context, say so politely in ${detectedLanguage}
- Provide specific examples or quotes when relevant
- Keep the response concise and helpful (max 1500 characters)
- Format it nicely for WhatsApp with proper line breaks
- Use emojis appropriately
- Write in professional business style
- If the question is in a different language than ${detectedLanguage}, still respond in ${detectedLanguage}
- Include specific data, numbers, and facts when available

Question: ${question}

Respond in: ${detectedLanguage}
      `;

      const response = await this.ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
      });

      return response.text;
    } catch (error) {
      console.error('‚ùå Failed to answer question:', error.message);
      throw error;
    }
  }

  async testConnection() {
    if (!this.isInitialized) {
      return false;
    }

    try {
      const response = await this.ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: "Say 'Hello, I am working!' in exactly those words.",
      });

      console.log('‚úÖ Gemini AI test successful:', response.text);
      return true;
    } catch (error) {
      console.error('‚ùå Gemini AI test failed:', error.message);
      return false;
    }
  }
}

export default new GeminiService();
